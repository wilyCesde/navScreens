{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { styles } from \"../assets/style/styles\";\nimport { TextInput, Button } from \"react-native-paper\";\nimport { useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar users = [{\n  username: \"Alejo\",\n  name: \"Alejandro\",\n  password: \"07\",\n  role: 1\n}, {\n  username: \"Pedro\",\n  name: \"Pedrito\",\n  password: \"08\",\n  role: 2\n}];\nfunction HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(\"\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    errormess = _useState6[0],\n    setErrormess = _useState6[1];\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: {\n        fontWeight: \"bold\",\n        marginBottom: 10\n      },\n      children: \"Inicio de Sesi\\xF3n\"\n    }), _jsx(TextInput, {\n      style: {\n        marginTop: 10\n      },\n      label: \"Usuario\",\n      mode: \"outlined\",\n      left: _jsx(TextInput.Icon, {\n        icon: \"account\",\n        color: \"grey\"\n      }),\n      onChangeText: function onChangeText(username) {\n        return setUsername(username);\n      },\n      value: username\n    }), _jsx(TextInput, {\n      style: {\n        marginTop: 10\n      },\n      label: \"Contrase\\xF1a\",\n      mode: \"outlined\",\n      left: _jsx(TextInput.Icon, {\n        icon: \"eye\",\n        color: \"grey\"\n      }),\n      onChangeText: function onChangeText(password) {\n        return setPassword(password);\n      },\n      value: password,\n      secureTextEntry: true\n    }), _jsx(Button, {\n      style: {\n        marginTop: 20\n      },\n      icon: \"login\",\n      mode: \"contained\",\n      onPress: function onPress() {\n        var fuser = users.find(function (usr) {\n          return username == username && usr.password == password;\n        });\n        if (fuser != undefined) {\n          var name = fuser.name,\n            _username = fuser.username;\n          navigation.navigate('profile', {\n            name: name,\n            username: _username\n          });\n          setErrormess('');\n        } else {\n          setErrormess('usuario y o contraseña inválidos');\n        }\n      },\n      children: \"Inciar Sesi\\xF3n\"\n    }), _jsx(Text, {\n      style: {\n        color: \"red\"\n      },\n      children: errormess\n    })]\n  });\n}\nexport default HomeScreen;","map":{"version":3,"names":["styles","TextInput","Button","useState","jsx","_jsx","jsxs","_jsxs","users","username","name","password","role","HomeScreen","_ref","navigation","_useState","_useState2","_slicedToArray","setUsername","_useState3","_useState4","setPassword","_useState5","_useState6","errormess","setErrormess","View","style","container","children","Text","fontWeight","marginBottom","marginTop","label","mode","left","Icon","icon","color","onChangeText","value","secureTextEntry","onPress","fuser","find","usr","undefined","navigate"],"sources":["E:/StudioSabados/ReactNative/navScreens/screens/HomeScreen.jsx"],"sourcesContent":["import { View, Text } from \"react-native\";\r\nimport { styles } from \"../assets/style/styles\";\r\nimport { TextInput, Button } from \"react-native-paper\";\r\nimport { useState } from \"react\";\r\n\r\nlet users = [\r\n  { username: \"Alejo\", name: \"Alejandro\", password: \"07\", role: 1 },\r\n  { username: \"Pedro\", name: \"Pedrito\", password: \"08\", role: 2 },\r\n];\r\n\r\nfunction HomeScreen({ navigation }) {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errormess, setErrormess] = useState(\"\");\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={{ fontWeight: \"bold\", marginBottom: 10 }}>\r\n        Inicio de Sesión\r\n      </Text>\r\n      <TextInput\r\n        style={{ marginTop: 10 }}\r\n        label=\"Usuario\"\r\n        mode=\"outlined\"\r\n        left={<TextInput.Icon icon=\"account\" color=\"grey\" />}\r\n        onChangeText={(username) => setUsername(username)}\r\n        value={username}\r\n      />\r\n      <TextInput\r\n        style={{ marginTop: 10 }}\r\n        label=\"Contraseña\"\r\n        mode=\"outlined\"\r\n        left={<TextInput.Icon icon=\"eye\" color=\"grey\" />}\r\n        onChangeText={(password) => setPassword(password)}\r\n        value={password}\r\n        secureTextEntry\r\n      />\r\n      <Button\r\n        style={{ marginTop: 20 }}\r\n        icon=\"login\"\r\n        mode=\"contained\"\r\n        onPress={() => {\r\n          let fuser = users.find(usr=>username ==username &&\r\n            usr.password==password);\r\n            if (fuser !=undefined) {\r\n             const {name,username}=fuser;\r\n             navigation.navigate('profile',{name:name ,username:username}) \r\n             setErrormess('')\r\n            } else {\r\n              setErrormess('usuario y o contraseña inválidos')\r\n            }\r\n        }}\r\n      >\r\n        Inciar Sesión\r\n      </Button>\r\n      <Text style={{ color: \"red\" }}>{errormess}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}